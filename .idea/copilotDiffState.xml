<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/controller/BookController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/controller/BookController.java" />
              <option name="originalContent" value="package com.booklify.controller;&#10;&#10;import com.booklify.domain.Book;&#10;import com.booklify.service.BookService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.HttpHeaders;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.web.multipart.MultipartFile;&#10;import java.io.IOException;&#10;import java.util.List;&#10;import com.booklify.dto.BookDto;&#10;import com.booklify.repository.RegularUserRepository;&#10;import java.util.stream.Collectors;&#10;&#10;@CrossOrigin(origins = &quot;http://127.0.0.1:3000&quot;)&#10;@RestController&#10;@RequestMapping(&quot;/api/book&quot;)&#10;public class BookController {&#10;&#10;    @Autowired&#10;    private RegularUser regularUser;&#10;&#10;    @BeforeEach&#10;    void setUp() {  // Initialize the test data&#10;        // Create a sample book&#10;&#10;        image = new byte[]{1, 2, 3};&#10;                LocalDateTime.now()&#10;        );&#10;        // Pass the valid RegularUser to OrderFactory&#10;        order = new OrderFactory().createOrder(LocalDateTime.now(), regularUser);&#10;        book = BookFactory.createBook(&#10;                &quot;9783161484100&quot;,&#10;                &quot;Atomic Habits&quot;,&#10;                &quot;James Clear&quot;,&#10;                &quot;Penguin Random House&quot;,&#10;                BookCondition.ACCEPTABLE,&#10;                19.99,&#10;                &quot;Minor marks in pages but readable&quot;,&#10;                image,&#10;                regularUser&#10;        return transactionRepository.findByRegularUser_Id(id);&#10;&#10;        quantity = 2;&#10;        totalAmount = 39.98; // Assuming totalAmount is quantity * book price&#10;        orderStatus = OrderStatus.PENDING;&#10;&#10;    }&#10;&#10;    @Test&#10;    void createOrderItemFactory() {&#10;        // Valid OrderItem creation&#10;        OrderItem orderItem = OrderItemFactory.createOrderItemFactory(quantity, totalAmount, book, order, orderStatus);&#10;        assertNotNull(orderItem);&#10;        assertEquals(quantity, orderItem.getQuantity());&#10;        assertEquals(totalAmount, orderItem.getTotalAmount());&#10;            .forEach(u -&gt; {&#10;                // Delete all books for this user first&#10;                bookService.getAll().stream()&#10;                    .filter(b -&gt; b.getUser().getId().equals(u.getId()))&#10;                    .forEach(b -&gt; bookService.deleteById(b.getBookID()));&#10;                // Now delete the user&#10;                regularUserRepository.deleteById(u.getId());&#10;            });&#10;&#10;        user = new RegularUser.RegularUserBuilder()&#10;                .setFullName(&quot;Test Seller&quot;)&#10;                .setEmail(&quot;test@example.com&quot;)&#10;                .setPassword(&quot;test123&quot;)&#10;                .build();&#10;        user = regularUserRepository.save(user);&#10;&#10;        book1 = BookFactory.createBook(&#10;                &quot;9780061122415&quot;,&#10;                &quot;The Alchemist&quot;,&#10;                &quot;Paulo Coelho&quot;,&#10;                &quot;HarperOne&quot;,&#10;                BookCondition.EXCELLENT,&#10;                180.0,&#10;                &quot;Fiction classic about destiny.&quot;,&#10;                imageBytes,&#10;                user&#10;        );&#10;&#10;        book2 = BookFactory.createBook(&#10;                &quot;9780451524935&quot;,&#10;                &quot;1984&quot;,&#10;                &quot;George Orwell&quot;,&#10;                &quot;Secker &amp; Warburg&quot;,&#10;                BookCondition.ACCEPTABLE,&#10;                150.0,&#10;        // Test with null order&#10;        invalidOrderItem = OrderItemFactory.createOrderItemFactory(quantity, totalAmount, book, null, orderStatus);&#10;        assertNull(invalidOrderItem);&#10;    }&#10;&#10;    @Test&#10;    void createOrderItemFactoryWithZeroQuantity() {&#10;        // Test with zero quantity&#10;        OrderItem invalidOrderItem = OrderItemFactory.createOrderItemFactory(0, totalAmount, book, order, orderStatus);&#10;        assertNull(invalidOrderItem);&#10;    }&#10;&#10;    @Test&#10;    void createOrderItemFactoryWithZeroTotalAmount() {&#10;        // Test with zero total amount&#10;        OrderItem invalidOrderItem = OrderItemFactory.createOrderItemFactory(quantity, 0.0, book, order, orderStatus);&#10;        assertNull(invalidOrderItem);&#10;    }&#10;}&#10;                &quot;Dystopian novel set in totalitarian regime.&quot;,&#10;                imageBytes,&#10;                user&#10;        );&#10;&#10;//         System.out.println(&quot;Book 1: &quot; + book1);&#10;//         System.out.println(&quot;Book 2: &quot; + book2);&#10;    }&#10;&#10;    @Test&#10;    @Order(1)&#10;    void save() {&#10;        Book saved1 = bookService.save(book1);&#10;        Book saved2 = bookService.save(book2);&#10;&#10;        assertNotNull(saved1);&#10;        assertNotNull(saved2);&#10;        System.out.println(&quot;Saved: &quot; + saved1);&#10;    }&#10;&#10;    @Test&#10;    @Order(2)&#10;    void findById() {&#10;        Book saved = bookService.save(book1);&#10;        Book found = bookService.findById(saved.getBookID());&#10;&#10;        assertNotNull(found);&#10;        assertEquals(saved.getBookID(), found.getBookID());&#10;        System.out.println(&quot;Found: &quot; + found);&#10;    }&#10;&#10;    @Test&#10;    @Order(3)&#10;    void update() {&#10;        Book saved = bookService.save(book1);&#10;        Book updated = new Book.Builder().copy(saved)&#10;                .setPrice(199.99)&#10;                .build();&#10;        Book result = bookService.update(updated);&#10;&#10;        assertNotNull(result);&#10;        assertEquals(199.99, result.getPrice());&#10;        System.out.println(&quot;Updated: &quot; + result);&#10;    }&#10;&#10;    @Test&#10;    @Order(4)&#10;    void deleteById() {&#10;        Book saved = bookService.save(book2);&#10;        bookService.deleteById(saved.getBookID());&#10;&#10;        Book deleted = bookService.findById(saved.getBookID());&#10;        assertNull(deleted);&#10;        System.out.println(&quot;Deleted book with ID: &quot; + saved.getBookID());&#10;    }&#10;&#10;    @Test&#10;    @Order(5)&#10;    void getAll() {&#10;        bookService.save(book1);&#10;        bookService.save(book2);&#10;&#10;        assertFalse(bookService.getAll().isEmpty());&#10;        System.out.println(&quot;All books: &quot; + bookService.getAll());&#10;    }&#10;&#10;    @Test&#10;    @Order(6)&#10;    void deleteAll() {&#10;        // Clean up dependent order items first to avoid foreign key constraint errors&#10;        orderItemRepository.deleteAll();&#10;        bookService.save(book1);&#10;        bookService.save(book2);&#10;        bookService.deleteAll();&#10;&#10;        assertTrue(bookService.getAll().isEmpty());&#10;        System.out.println(&quot;All books deleted&quot;);&#10;    }&#10;        assertEquals(order, orderItem.getOrder());&#10;        assertEquals(orderStatus, orderItem.getOrderStatus());&#10;&#10;        // Invalid cases&#10;        assertNull(OrderItemFactory.createOrderItemFactory(-1, totalAmount, book, order, orderStatus)); // Invalid quantity&#10;        assertNull(OrderItemFactory.createOrderItemFactory(quantity, -1.0, book, order, orderStatus)); // Invalid total amount&#10;        assertNull(OrderItemFactory.createOrderItemFactory(quantity, totalAmount, null, order, orderStatus)); // Null book&#10;        assertNull(OrderItemFactory.createOrderItemFactory(quantity, totalAmount, book, null, orderStatus)); // Null order&#10;        assertNull(OrderItemFactory.createOrderItemFactory(quantity, totalAmount, book, order, null)); // Null orderStatus&#10;&#10;    }&#10;&#10;    @Test&#10;    void createOrderItemFactoryWithInvalidData() {&#10;        // Test with invalid quantity&#10;        OrderItem invalidOrderItem = OrderItemFactory.createOrderItemFactory(-5, totalAmount, book, order, orderStatus);&#10;        assertNull(invalidOrderItem);&#10;&#10;        // Test with invalid total amount&#10;        invalidOrderItem = OrderItemFactory.createOrderItemFactory(quantity, -10.0, book, order, orderStatus);&#10;        assertNull(invalidOrderItem);&#10;&#10;        // Test with null book&#10;        invalidOrderItem = OrderItemFactory.createOrderItemFactory(quantity, totalAmount, null, order, orderStatus);&#10;        assertNull(invalidOrderItem);&#10;&#10;    @PostMapping(value = &quot;/update&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)&#10;    public ResponseEntity&lt;BookDto&gt; update(@RequestPart(&quot;bookRequest&quot;) BookDto bookDto,&#10;                                       @RequestPart(value = &quot;imageFile&quot;, required = false) MultipartFile imageFile) throws IOException {&#10;        Book book = BookDto.toEntity(bookDto);&#10;        if (bookDto.getUploaderId() != null) {&#10;            regularUserRepository.findById(bookDto.getUploaderId()).ifPresent(book::setUser);&#10;        }&#10;        if (imageFile != null &amp;&amp; !imageFile.isEmpty()) {&#10;            book.setImage(imageFile.getBytes());&#10;        }&#10;        Book updated = service.update(book);&#10;        return ResponseEntity.ok(BookDto.fromEntity(updated));&#10;    }&#10;&#10;    @DeleteMapping(&quot;/delete/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; delete(@PathVariable Long id) {&#10;        service.deleteById(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;    @GetMapping(&quot;/getAll&quot;)&#10;    public ResponseEntity&lt;List&lt;BookDto&gt;&gt; getAll() {&#10;        List&lt;Book&gt; books = service.getAll();&#10;        List&lt;BookDto&gt; dtos = books.stream().map(BookDto::fromEntity).collect(Collectors.toList());&#10;        return ResponseEntity.ok(dtos);&#10;    }&#10;&#10;    @GetMapping(&quot;/image/{id}&quot;)&#10;    public ResponseEntity&lt;byte[]&gt; getBookImage(@PathVariable Long id) {&#10;        Book book = service.findById(id);&#10;        if (book != null &amp;&amp; book.getImage() != null) {&#10;            HttpHeaders headers = new HttpHeaders();&#10;            headers.setContentType(MediaType.IMAGE_JPEG);&#10;            return new ResponseEntity&lt;&gt;(book.getImage(), headers, HttpStatus.OK);&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    @GetMapping(&quot;/search/title&quot;)&#10;    public ResponseEntity&lt;List&lt;BookDto&gt;&gt; searchBooks(@RequestParam String query) {&#10;        List&lt;Book&gt; books = service.findByTitleContainingIgnoreCase(query);&#10;        if (books.isEmpty()) {&#10;            return ResponseEntity.noContent().build();&#10;        }&#10;        List&lt;BookDto&gt; dtos = books.stream().map(BookDto::fromEntity).collect(Collectors.toList());&#10;        return ResponseEntity.ok(dtos);&#10;    }&#10;&#10;    @GetMapping(&quot;/search/author&quot;)&#10;    public ResponseEntity&lt;List&lt;BookDto&gt;&gt; searchBooksByAuthor(@RequestParam String author) {&#10;        List&lt;Book&gt; books = service.findByAuthor(author);&#10;        if (books.isEmpty()) {&#10;            return ResponseEntity.noContent().build();&#10;        }&#10;        List&lt;BookDto&gt; dtos = books.stream().map(BookDto::fromEntity).collect(Collectors.toList());&#10;        return ResponseEntity.ok(dtos);&#10;    }&#10;&#10;    @GetMapping(&quot;/search/isbn&quot;)&#10;    public ResponseEntity&lt;List&lt;BookDto&gt;&gt; searchBookByIsbn(@RequestParam String isbn) {&#10;        List&lt;Book&gt; books = service.findByIsbn(isbn);&#10;        if (books.isEmpty()) {&#10;            return ResponseEntity.noContent().build();&#10;        }&#10;        List&lt;BookDto&gt; dtos = books.stream().map(BookDto::fromEntity).collect(Collectors.toList());&#10;        return ResponseEntity.ok(dtos);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.booklify.controller;&#10;&#10;import com.booklify.domain.Book;&#10;import com.booklify.service.BookService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.HttpHeaders;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.web.multipart.MultipartFile;&#10;import java.io.IOException;&#10;import java.util.List;&#10;import com.booklify.dto.BookDto;&#10;import com.booklify.repository.RegularUserRepository;&#10;import java.util.stream.Collectors;&#10;&#10;@CrossOrigin(origins = &quot;http://127.0.0.1:3000&quot;)&#10;@RestController&#10;@RequestMapping(&quot;/api/book&quot;)&#10;public class BookController {&#10;&#10;    @Autowired&#10;    private BookService service;&#10;&#10;    @Autowired&#10;    private RegularUserRepository regularUserRepository;&#10;&#10;    @PostMapping(value = &quot;/create&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)&#10;    public ResponseEntity&lt;BookDto&gt; create(@RequestPart(&quot;bookRequest&quot;) BookDto bookDto,&#10;                                       @RequestPart(value = &quot;imageFile&quot;, required = false) MultipartFile imageFile) throws IOException {&#10;        Book.Builder builder = new Book.Builder()&#10;                .setBookID(bookDto.getBookID())&#10;                .setIsbn(bookDto.getIsbn())&#10;                .setTitle(bookDto.getTitle())&#10;                .setAuthor(bookDto.getAuthor())&#10;                .setPublisher(bookDto.getPublisher())&#10;                .setCondition(bookDto.getCondition())&#10;                .setPrice(bookDto.getPrice())&#10;                .setDescription(bookDto.getDescription())&#10;                .setUploadedDate(bookDto.getUploadedDate());&#10;        if (bookDto.getUploaderId() != null) {&#10;            regularUserRepository.findById(bookDto.getUploaderId()).ifPresent(builder::setUser);&#10;        }&#10;        if (imageFile != null &amp;&amp; !imageFile.isEmpty()) {&#10;            builder.setImage(imageFile.getBytes());&#10;        }&#10;        Book book = builder.build();&#10;        Book created = service.save(book);&#10;        return ResponseEntity.ok(BookDto.fromEntity(created));&#10;    }&#10;&#10;    @GetMapping(&quot;/read/{id}&quot;)&#10;    public ResponseEntity&lt;BookDto&gt; read(@PathVariable Long id) {&#10;        Book book = service.findById(id);&#10;        if (book == null) {&#10;            return ResponseEntity.notFound().build();&#10;        }&#10;        return ResponseEntity.ok(BookDto.fromEntity(book));&#10;    }&#10;&#10;    @PostMapping(value = &quot;/update&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)&#10;    public ResponseEntity&lt;BookDto&gt; update(@RequestPart(&quot;bookRequest&quot;) BookDto bookDto,&#10;                                       @RequestPart(value = &quot;imageFile&quot;, required = false) MultipartFile imageFile) throws IOException {&#10;        Book.Builder builder = new Book.Builder()&#10;                .setBookID(bookDto.getBookID())&#10;                .setIsbn(bookDto.getIsbn())&#10;                .setTitle(bookDto.getTitle())&#10;                .setAuthor(bookDto.getAuthor())&#10;                .setPublisher(bookDto.getPublisher())&#10;                .setCondition(bookDto.getCondition())&#10;                .setPrice(bookDto.getPrice())&#10;                .setDescription(bookDto.getDescription())&#10;                .setUploadedDate(bookDto.getUploadedDate());&#10;        if (bookDto.getUploaderId() != null) {&#10;            regularUserRepository.findById(bookDto.getUploaderId()).ifPresent(builder::setUser);&#10;        }&#10;        if (imageFile != null &amp;&amp; !imageFile.isEmpty()) {&#10;            builder.setImage(imageFile.getBytes());&#10;        }&#10;        Book book = builder.build();&#10;        Book updated = service.update(book);&#10;        return ResponseEntity.ok(BookDto.fromEntity(updated));&#10;    }&#10;&#10;    @DeleteMapping(&quot;/delete/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; delete(@PathVariable Long id) {&#10;        service.deleteById(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;&#10;    @GetMapping(&quot;/getAll&quot;)&#10;    public ResponseEntity&lt;List&lt;BookDto&gt;&gt; getAll() {&#10;        List&lt;Book&gt; books = service.getAll();&#10;        List&lt;BookDto&gt; dtos = books.stream().map(BookDto::fromEntity).collect(Collectors.toList());&#10;        return ResponseEntity.ok(dtos);&#10;    }&#10;&#10;    @GetMapping(&quot;/image/{id}&quot;)&#10;    public ResponseEntity&lt;byte[]&gt; getBookImage(@PathVariable Long id) {&#10;        Book book = service.findById(id);&#10;        if (book != null &amp;&amp; book.getImage() != null) {&#10;            HttpHeaders headers = new HttpHeaders();&#10;            headers.setContentType(MediaType.IMAGE_JPEG);&#10;            return new ResponseEntity&lt;&gt;(book.getImage(), headers, HttpStatus.OK);&#10;        }&#10;        return ResponseEntity.notFound().build();&#10;    }&#10;&#10;    @GetMapping(&quot;/search/title&quot;)&#10;    public ResponseEntity&lt;List&lt;BookDto&gt;&gt; searchBooks(@RequestParam String query) {&#10;        List&lt;Book&gt; books = service.findByTitleContainingIgnoreCase(query);&#10;        if (books.isEmpty()) {&#10;            return ResponseEntity.noContent().build();&#10;        }&#10;        List&lt;BookDto&gt; dtos = books.stream().map(BookDto::fromEntity).collect(Collectors.toList());&#10;        return ResponseEntity.ok(dtos);&#10;    }&#10;&#10;    @GetMapping(&quot;/search/author&quot;)&#10;    public ResponseEntity&lt;List&lt;BookDto&gt;&gt; searchBooksByAuthor(@RequestParam String author) {&#10;        List&lt;Book&gt; books = service.findByAuthor(author);&#10;        if (books.isEmpty()) {&#10;            return ResponseEntity.noContent().build();&#10;        }&#10;        List&lt;BookDto&gt; dtos = books.stream().map(BookDto::fromEntity).collect(Collectors.toList());&#10;        return ResponseEntity.ok(dtos);&#10;    }&#10;&#10;    @GetMapping(&quot;/search/isbn&quot;)&#10;    public ResponseEntity&lt;List&lt;BookDto&gt;&gt; searchBookByIsbn(@RequestParam String isbn) {&#10;        List&lt;Book&gt; books = service.findByIsbn(isbn);&#10;        if (books.isEmpty()) {&#10;            return ResponseEntity.noContent().build();&#10;        }&#10;        List&lt;BookDto&gt; dtos = books.stream().map(BookDto::fromEntity).collect(Collectors.toList());&#10;        return ResponseEntity.ok(dtos);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/domain/RegularUser.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/domain/RegularUser.java" />
              <option name="originalContent" value="package com.booklify.domain;&#10;&#10;import jakarta.persistence.DiscriminatorValue;&#10;import jakarta.persistence.Entity;&#10;import jakarta.persistence.Lob;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;@DiscriminatorValue(&quot;RegularUser&quot;)&#10;public class RegularUser extends User{&#10;    @Column(nullable = true)&#10;    private Double sellerRating = 0.0;&#10;&#10;    @Lob&#10;    @Column(nullable = true)&#10;    private String bio;&#10;&#10;    @Column(nullable = true)&#10;    private LocalDateTime lastLogin;&#10;&#10;    public RegularUser() {&#10;        super();&#10;    }&#10;&#10;    public RegularUser(Long id, String fullName, String email, String password, LocalDateTime dateJoined,&#10;                       Double sellerRating, String bio, LocalDateTime lastLogin) {&#10;        super(id, fullName, email, password, dateJoined);&#10;        this.sellerRating = sellerRating;&#10;        this.bio = bio;&#10;        this.lastLogin = lastLogin;&#10;    }&#10;&#10;    public RegularUser(RegularUserBuilder regularUserBuilder) {&#10;        this.id = regularUserBuilder.id;&#10;        this.fullName = regularUserBuilder.fullName;&#10;        this.email = regularUserBuilder.email;&#10;        this.password = regularUserBuilder.password;&#10;        this.dateJoined = regularUserBuilder.dateJoined;&#10;        this.sellerRating = regularUserBuilder.sellerRating;&#10;        this.bio = regularUserBuilder.bio;&#10;        this.lastLogin = regularUserBuilder.lastLogin;&#10;    }&#10;&#10;    public double getSellerRating() {&#10;        return sellerRating;&#10;    }&#10;&#10;    public String getBio() {&#10;        return bio;&#10;    }&#10;&#10;    public LocalDateTime getLastLogin() {&#10;        return lastLogin;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;RegularUser{&quot; +&#10;                &quot;, id=&quot; + id +&#10;                &quot;, fullName='&quot; + fullName + '\'' +&#10;                &quot;, email='&quot; + email + '\'' +&#10;                &quot;, password='&quot; + password + '\'' +&#10;                &quot;, dateJoined=&quot; + dateJoined +&#10;                &quot;sellerRating=&quot; + sellerRating +&#10;                &quot;, bio='&quot; + bio + '\'' +&#10;                &quot;, lastLogin=&quot; + lastLogin +&#10;                '}';&#10;    }&#10;&#10;    public static class RegularUserBuilder {&#10;        private Long id;&#10;        private String fullName;&#10;        private String email;&#10;        private String password;&#10;        private LocalDateTime dateJoined;&#10;        private Double sellerRating = 0.0;&#10;        private String bio;&#10;        private LocalDateTime lastLogin;&#10;&#10;        public RegularUserBuilder setId(Long id) {&#10;            this.id = id;&#10;            return this;&#10;        }&#10;&#10;        public RegularUserBuilder setFullName(String fullName) {&#10;            this.fullName = fullName;&#10;            return this;&#10;        }&#10;&#10;        public RegularUserBuilder setEmail(String email) {&#10;            this.email = email;&#10;            return this;&#10;        }&#10;&#10;        public RegularUserBuilder setPassword(String password) {&#10;            this.password = password;&#10;            return this;&#10;        }&#10;&#10;        public RegularUserBuilder setDateJoined(LocalDateTime dateJoined) {&#10;            this.dateJoined = dateJoined;&#10;            return this;&#10;        }&#10;&#10;        public RegularUserBuilder setSellerRating(Double sellerRating) {&#10;            this.sellerRating = sellerRating;&#10;            return this;&#10;        }&#10;&#10;        public RegularUserBuilder setBio(String bio) {&#10;            this.bio = bio;&#10;            return this;&#10;        }&#10;&#10;        public RegularUserBuilder setLastLogin(LocalDateTime lastLogin) {&#10;            this.lastLogin = lastLogin;&#10;            return this;&#10;        }&#10;&#10;        public RegularUserBuilder copy(RegularUser regularUser) {&#10;            this.id = regularUser.id;&#10;            this.fullName = regularUser.fullName;&#10;            this.email = regularUser.email;&#10;            this.password = regularUser.password;&#10;            this.dateJoined = regularUser.dateJoined;&#10;            this.sellerRating = regularUser.sellerRating;&#10;            this.bio = regularUser.bio;&#10;            this.lastLogin = regularUser.lastLogin;&#10;            return this;&#10;        }&#10;&#10;&#10;&#10;        public RegularUser build() {&#10;            return new RegularUser(this);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.booklify.domain;&#13;&#10;&#13;&#10;import com.fasterxml.jackson.annotation.JsonIgnoreProperties;&#13;&#10;import jakarta.persistence.Column;&#13;&#10;import jakarta.persistence.DiscriminatorValue;&#13;&#10;import jakarta.persistence.Entity;&#13;&#10;import jakarta.persistence.Lob;&#13;&#10;&#13;&#10;import java.time.LocalDateTime;&#13;&#10;&#13;&#10;@Entity&#13;&#10;@DiscriminatorValue(&quot;RegularUser&quot;)&#13;&#10;@JsonIgnoreProperties({&quot;hibernateLazyInitializer&quot;, &quot;handler&quot;})&#13;&#10;public class RegularUser extends User{&#13;&#10;&#13;&#10;    @Column(nullable = true)&#13;&#10;    private Double sellerRating = 0.0;&#13;&#10;&#13;&#10;    @Lob&#13;&#10;    @Column(nullable = true)&#13;&#10;    private String bio;&#13;&#10;&#13;&#10;    @Column(nullable = true)&#13;&#10;    private LocalDateTime lastLogin;&#13;&#10;&#13;&#10;    public RegularUser() {&#13;&#10;        super();&#13;&#10;    }&#13;&#10;&#13;&#10;    public RegularUser(Long id, String fullName, String email, String password, LocalDateTime dateJoined,&#13;&#10;                       Double sellerRating, String bio, LocalDateTime lastLogin) {&#13;&#10;        super(id, fullName, email, password, dateJoined);&#13;&#10;        this.sellerRating = sellerRating;&#13;&#10;        this.bio = bio;&#13;&#10;        this.lastLogin = lastLogin;&#13;&#10;    }&#13;&#10;&#13;&#10;    public RegularUser(RegularUserBuilder regularUserBuilder) {&#13;&#10;        this.id = regularUserBuilder.id;&#13;&#10;        this.fullName = regularUserBuilder.fullName;&#13;&#10;        this.email = regularUserBuilder.email;&#13;&#10;        this.password = regularUserBuilder.password;&#13;&#10;        this.dateJoined = regularUserBuilder.dateJoined;&#13;&#10;        this.sellerRating = regularUserBuilder.sellerRating;&#13;&#10;        this.bio = regularUserBuilder.bio;&#13;&#10;        this.lastLogin = regularUserBuilder.lastLogin;&#13;&#10;    }&#13;&#10;&#13;&#10;    public double getSellerRating() {&#13;&#10;        return sellerRating;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getBio() {&#13;&#10;        return bio;&#13;&#10;    }&#13;&#10;&#13;&#10;    public LocalDateTime getLastLogin() {&#13;&#10;        return lastLogin;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public String toString() {&#13;&#10;        return &quot;RegularUser{&quot; +&#13;&#10;                &quot;, id=&quot; + id +&#13;&#10;                &quot;, fullName='&quot; + fullName + '\'' +&#13;&#10;                &quot;, email='&quot; + email + '\'' +&#13;&#10;                &quot;, password='&quot; + password + '\'' +&#13;&#10;                &quot;, dateJoined=&quot; + dateJoined +&#13;&#10;                &quot;sellerRating=&quot; + sellerRating +&#13;&#10;                &quot;, bio='&quot; + bio + '\'' +&#13;&#10;                &quot;, lastLogin=&quot; + lastLogin +&#13;&#10;                '}';&#13;&#10;    }&#13;&#10;&#13;&#10;    public static class RegularUserBuilder {&#13;&#10;        private Long id;&#13;&#10;        private String fullName;&#13;&#10;        private String email;&#13;&#10;        private String password;&#13;&#10;        private LocalDateTime dateJoined;&#13;&#10;        private Double sellerRating = 0.0;&#13;&#10;        private String bio;&#13;&#10;        private LocalDateTime lastLogin;&#13;&#10;&#13;&#10;        public RegularUserBuilder setId(Long id) {&#13;&#10;            this.id = id;&#13;&#10;            return this;&#13;&#10;        }&#13;&#10;&#13;&#10;        public RegularUserBuilder setFullName(String fullName) {&#13;&#10;            this.fullName = fullName;&#13;&#10;            return this;&#13;&#10;        }&#13;&#10;&#13;&#10;        public RegularUserBuilder setEmail(String email) {&#13;&#10;            this.email = email;&#13;&#10;            return this;&#13;&#10;        }&#13;&#10;&#13;&#10;        public RegularUserBuilder setPassword(String password) {&#13;&#10;            this.password = password;&#13;&#10;            return this;&#13;&#10;        }&#13;&#10;&#13;&#10;        public RegularUserBuilder setDateJoined(LocalDateTime dateJoined) {&#13;&#10;            this.dateJoined = dateJoined;&#13;&#10;            return this;&#13;&#10;        }&#13;&#10;&#13;&#10;        public RegularUserBuilder setSellerRating(Double sellerRating) {&#13;&#10;            this.sellerRating = sellerRating;&#13;&#10;            return this;&#13;&#10;        }&#13;&#10;&#13;&#10;        public RegularUserBuilder setBio(String bio) {&#13;&#10;            this.bio = bio;&#13;&#10;            return this;&#13;&#10;        }&#13;&#10;&#13;&#10;        public RegularUserBuilder setLastLogin(LocalDateTime lastLogin) {&#13;&#10;            this.lastLogin = lastLogin;&#13;&#10;            return this;&#13;&#10;        }&#13;&#10;&#13;&#10;        public RegularUserBuilder copy(RegularUser regularUser) {&#13;&#10;            this.id = regularUser.id;&#13;&#10;            this.fullName = regularUser.fullName;&#13;&#10;            this.email = regularUser.email;&#13;&#10;            this.password = regularUser.password;&#13;&#10;            this.dateJoined = regularUser.dateJoined;&#13;&#10;            this.sellerRating = regularUser.sellerRating;&#13;&#10;            this.bio = regularUser.bio;&#13;&#10;            this.lastLogin = regularUser.lastLogin;&#13;&#10;            return this;&#13;&#10;        }&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;        public RegularUser build() {&#13;&#10;            return new RegularUser(this);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/repository/BookRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/repository/BookRepository.java" />
              <option name="originalContent" value="package com.booklify.repository;&#10;&#10;import com.booklify.domain.Book;&#10;import com.booklify.domain.enums.BookCondition;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public interface BookRepository extends JpaRepository&lt;Book, Long&gt; {&#10;&#10;&#10;    List&lt;Book&gt; findByTitleContainingIgnoreCase(String title);&#10;&#10;    List&lt;Book&gt; findByAuthor(String author);&#10;&#10;    List&lt;Book&gt; findByCondition(BookCondition condition);&#10;&#10;    List&lt;Book&gt; findByPriceLessThanEqual(Double maxPrice);&#10;&#10;    Optional&lt;Book&gt; findByIsbn(String isbn);&#10;&#10;//    List&lt;Book&gt; findBySeller_Id(Long sellerId);&#10;&#10;    @Query(&quot;SELECT b FROM Book b WHERE b.price &gt; :minPrice AND b.condition = :condition&quot;)&#10;    List&lt;Book&gt; findBooksByMinPriceAndCondition(@Param(&quot;minPrice&quot;) Double minPrice, @Param(&quot;condition&quot;) BookCondition condition);&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.booklify.repository;&#13;&#10;&#13;&#10;import com.booklify.domain.Book;&#13;&#10;import com.booklify.domain.enums.BookCondition;&#13;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#13;&#10;import org.springframework.data.jpa.repository.Query;&#13;&#10;import org.springframework.data.repository.query.Param;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public interface BookRepository extends JpaRepository&lt;Book, Long&gt; {&#13;&#10;&#13;&#10;&#13;&#10;    List&lt;Book&gt; findByTitleContainingIgnoreCase(String title);&#13;&#10;&#13;&#10;    List&lt;Book&gt; findByAuthor(String author);&#13;&#10;&#13;&#10;    List&lt;Book&gt; findByCondition(BookCondition condition);&#13;&#10;&#13;&#10;    List&lt;Book&gt; findByPriceLessThanEqual(Double maxPrice);&#13;&#10;&#13;&#10;    List&lt;Book&gt; findByIsbn(String isbn);&#13;&#10;&#13;&#10;//    List&lt;Book&gt; findBySeller_Id(Long sellerId);&#13;&#10;&#13;&#10;    @Query(&quot;SELECT b FROM Book b WHERE b.price &gt; :minPrice AND b.condition = :condition&quot;)&#13;&#10;    List&lt;Book&gt; findBooksByMinPriceAndCondition(@Param(&quot;minPrice&quot;) Double minPrice, @Param(&quot;condition&quot;) BookCondition condition);&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/repository/ReviewRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/repository/ReviewRepository.java" />
              <option name="originalContent" value="// Thaakirah Watson, 230037550&#10;package com.booklify.repository;&#10;&#10;import com.booklify.domain.Review;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface ReviewRepository extends JpaRepository&lt;Review, Long&gt; {&#10;    List&lt;Review&gt; findByBookBookID(Long bookId);&#10;    List&lt;Review&gt; findByUserUserID(Long userId);&#10;}&#10;" />
              <option name="updatedContent" value="// Thaakirah Watson, 230037550&#10;package com.booklify.repository;&#10;&#10;import com.booklify.domain.Review;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface ReviewRepository extends JpaRepository&lt;Review, Long&gt; {&#10;    List&lt;Review&gt; findByBookBookID(Long bookId);&#10;    List&lt;Review&gt; findByUserId(Long id);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/repository/TransactionRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/repository/TransactionRepository.java" />
              <option name="originalContent" value="package com.booklify.repository;&#10;&#10;import com.booklify.domain.RegularUser;&#10;import com.booklify.domain.Transaction;&#10;import com.booklify.domain.enums.TransactionStatus;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface TransactionRepository extends JpaRepository&lt;Transaction, Long&gt; {&#10;&#10;    List&lt;Transaction&gt; findByTransactionStatus(TransactionStatus transactionStatus);&#10;    List&lt;Transaction&gt; findByOrder_OrderId(Long orderId);&#10;    List&lt;Transaction&gt; findByPayment_Id(Long id);&#10;    List&lt;Transaction&gt; findByRegularUser(Long id);&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.booklify.repository;&#10;&#10;import com.booklify.domain.RegularUser;&#10;import com.booklify.domain.Transaction;&#10;import com.booklify.domain.enums.TransactionStatus;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface TransactionRepository extends JpaRepository&lt;Transaction, Long&gt; {&#10;&#10;    List&lt;Transaction&gt; findByTransactionStatus(TransactionStatus transactionStatus);&#10;    List&lt;Transaction&gt; findByOrder_OrderId(Long orderId);&#10;    List&lt;Transaction&gt; findByPayment_Id(Long id);&#10;    List&lt;Transaction&gt; findByRegularUser_Id(Long id);&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/service/IBookService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/main/java/com/booklify/service/IBookService.java" />
              <option name="originalContent" value="package com.booklify.service;&#10;&#10;import com.booklify.domain.Book;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public interface IBookService extends IService&lt;Book, Long&gt;{&#10;      List&lt;Book&gt; getAll();&#10;      void deleteAll();&#10;      Optional&lt;Book&gt; findByIsbn(String isbn);&#10;      List&lt;Book&gt; findByTitleContainingIgnoreCase(String title);&#10;      List&lt;Book&gt; findByAuthor(String author);&#10;}&#10;" />
              <option name="updatedContent" value="package com.booklify.service;&#13;&#10;&#13;&#10;import com.booklify.domain.Book;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public interface IBookService extends IService&lt;Book, Long&gt;{&#13;&#10;      List&lt;Book&gt; getAll();&#13;&#10;      void deleteAll();&#13;&#10;      List&lt;Book&gt; findByIsbn(String isbn);&#13;&#10;      List&lt;Book&gt; findByTitleContainingIgnoreCase(String title);&#13;&#10;      List&lt;Book&gt; findByAuthor(String author);&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/booklify-backend/src/test/java/com/booklify/service/BookServiceTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/booklify-backend/src/test/java/com/booklify/service/BookServiceTest.java" />
              <option name="originalContent" value="package com.booklify.service;&#10;&#10;import com.booklify.domain.Book;&#10;import com.booklify.domain.RegularUser;&#10;import com.booklify.domain.enums.BookCondition;&#10;import com.booklify.factory.BookFactory;&#10;import com.booklify.repository.OrderItemRepository;&#10;import com.booklify.repository.RegularUserRepository;&#10;import org.junit.jupiter.api.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;&#10;import javax.imageio.ImageIO;&#10;import java.awt.image.BufferedImage;&#10;import java.io.ByteArrayOutputStream;&#10;import java.io.File;&#10;import java.io.IOException;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;@SpringBootTest&#10;@TestMethodOrder(MethodOrderer.OrderAnnotation.class)&#10;class BookServiceTest {&#10;&#10;    @Autowired&#10;    private BookService bookService;&#10;&#10;    @Autowired&#10;    private RegularUserRepository regularUserRepository;&#10;&#10;    @Autowired&#10;    private OrderItemRepository orderItemRepository;&#10;&#10;    private Book book1, book2;&#10;    private ByteArrayOutputStream outputStream;&#10;    private BufferedImage image;&#10;    private byte[] imageBytes;&#10;    private RegularUser user;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;       String url = &quot;C:\\Users\\raney\\Downloads\\cput log.png&quot;;&#10;       // String url = &quot;C:\\Users\\raney\\Downloads\\cput log.png.png&quot;;&#10;&#10;        try {&#10;            image = ImageIO.read(new File(url));&#10;            outputStream = new ByteArrayOutputStream();&#10;            ImageIO.write(image, &quot;png&quot;, outputStream);&#10;            imageBytes = outputStream.toByteArray();&#10;        } catch (IOException ex) {&#10;            System.out.println(&quot;Image read error: &quot; + ex.getMessage());&#10;            imageBytes = new byte[]{1, 2, 3}; // fallback dummy image&#10;        }&#10;&#10;        // Ensure no duplicate user by email&#10;        regularUserRepository.findAll().stream()&#10;            .filter(u -&gt; u.getEmail().equals(&quot;test@example.com&quot;))&#10;            .forEach(u -&gt; regularUserRepository.deleteById(u.getId()));&#10;&#10;    @Test&#10;    @Order(7)&#10;    void findByIsbn() {&#10;        bookService.save(book1);&#10;        Optional&lt;Book&gt; found = bookService.findByIsbn(book1.getIsbn());&#10;        assertTrue(found.isPresent());&#10;        assertEquals(book1.getIsbn(), found.get().getIsbn());&#10;        System.out.println(&quot;Found by ISBN: &quot; + found.get());&#10;    }&#10;&#10;    @Test&#10;    @Order(8)&#10;    void findByTitleContainingIgnoreCase() {&#10;        bookService.save(book1);&#10;        List&lt;Book&gt; found = bookService.findByTitleContainingIgnoreCase(&quot;alchemist&quot;);&#10;        assertFalse(found.isEmpty());&#10;        assertTrue(found.stream().anyMatch(b -&gt; b.getTitle().equalsIgnoreCase(book1.getTitle())));&#10;        System.out.println(&quot;Found by title (ignore case): &quot; + found);&#10;    }&#10;&#10;    @Test&#10;    @Order(9)&#10;    void findByAuthor() {&#10;        bookService.save(book2);&#10;        List&lt;Book&gt; found = bookService.findByAuthor(book2.getAuthor());&#10;        assertFalse(found.isEmpty());&#10;        assertTrue(found.stream().anyMatch(b -&gt; b.getAuthor().equals(book2.getAuthor())));&#10;        System.out.println(&quot;Found by author: &quot; + found);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.booklify.service;&#10;&#10;import com.booklify.domain.Book;&#10;import com.booklify.domain.RegularUser;&#10;import com.booklify.domain.enums.BookCondition;&#10;import com.booklify.factory.BookFactory;&#10;import com.booklify.repository.OrderItemRepository;&#10;import com.booklify.repository.RegularUserRepository;&#10;import org.junit.jupiter.api.*;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;&#10;import javax.imageio.ImageIO;&#10;import java.awt.image.BufferedImage;&#10;import java.io.ByteArrayOutputStream;&#10;import java.io.File;&#10;import java.io.IOException;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;@SpringBootTest&#10;@TestMethodOrder(MethodOrderer.OrderAnnotation.class)&#10;class BookServiceTest {&#10;&#10;    @Autowired&#10;    private BookService bookService;&#10;&#10;    @Autowired&#10;    private RegularUserRepository regularUserRepository;&#10;&#10;    @Autowired&#10;    private OrderItemRepository orderItemRepository;&#10;&#10;    private Book book1, book2;&#10;    private ByteArrayOutputStream outputStream;&#10;    private BufferedImage image;&#10;    private byte[] imageBytes;&#10;    private RegularUser user;&#10;&#10;    @BeforeEach&#10;    void setUp() {&#10;       String url = &quot;C:\\Users\\raney\\Downloads\\cput log.png&quot;;&#10;       // String url = &quot;C:\\Users\\raney\\Downloads\\cput log.png.png&quot;;&#10;&#10;        try {&#10;            image = ImageIO.read(new File(url));&#10;            outputStream = new ByteArrayOutputStream();&#10;            ImageIO.write(image, &quot;png&quot;, outputStream);&#10;            imageBytes = outputStream.toByteArray();&#10;        } catch (IOException ex) {&#10;            System.out.println(&quot;Image read error: &quot; + ex.getMessage());&#10;            imageBytes = new byte[]{1, 2, 3}; // fallback dummy image&#10;        }&#10;&#10;        // Ensure no duplicate user by email&#10;        regularUserRepository.findAll().stream()&#10;            .filter(u -&gt; u.getEmail().equals(&quot;test@example.com&quot;))&#10;            .forEach(u -&gt; {&#10;                // Delete all books for this user first&#10;                bookService.getAll().stream()&#10;                    .filter(b -&gt; b.getUser().getId().equals(u.getId()))&#10;                    .forEach(b -&gt; bookService.deleteById(b.getBookID()));&#10;                // Now delete the user&#10;                regularUserRepository.deleteById(u.getId());&#10;            });&#10;&#10;        user = new RegularUser.RegularUserBuilder()&#10;                .setFullName(&quot;Test Seller&quot;)&#10;                .setEmail(&quot;test@example.com&quot;)&#10;                .setPassword(&quot;test123&quot;)&#10;                .build();&#10;        user = regularUserRepository.save(user);&#10;&#10;        book1 = BookFactory.createBook(&#10;                &quot;9780061122415&quot;,&#10;                &quot;The Alchemist&quot;,&#10;                &quot;Paulo Coelho&quot;,&#10;                &quot;HarperOne&quot;,&#10;                BookCondition.EXCELLENT,&#10;                180.0,&#10;                &quot;Fiction classic about destiny.&quot;,&#10;                imageBytes,&#10;                user&#10;        );&#10;&#10;        book2 = BookFactory.createBook(&#10;                &quot;9780451524935&quot;,&#10;                &quot;1984&quot;,&#10;                &quot;George Orwell&quot;,&#10;                &quot;Secker &amp; Warburg&quot;,&#10;                BookCondition.ACCEPTABLE,&#10;                150.0,&#10;                &quot;Dystopian novel set in totalitarian regime.&quot;,&#10;                imageBytes,&#10;                user&#10;        );&#10;&#10;//         System.out.println(&quot;Book 1: &quot; + book1);&#10;//         System.out.println(&quot;Book 2: &quot; + book2);&#10;    }&#10;&#10;    @Test&#10;    @Order(1)&#10;    void save() {&#10;        Book saved1 = bookService.save(book1);&#10;        Book saved2 = bookService.save(book2);&#10;&#10;        assertNotNull(saved1);&#10;        assertNotNull(saved2);&#10;        System.out.println(&quot;Saved: &quot; + saved1);&#10;    }&#10;&#10;    @Test&#10;    @Order(2)&#10;    void findById() {&#10;        Book saved = bookService.save(book1);&#10;        Book found = bookService.findById(saved.getBookID());&#10;&#10;        assertNotNull(found);&#10;        assertEquals(saved.getBookID(), found.getBookID());&#10;        System.out.println(&quot;Found: &quot; + found);&#10;    }&#10;&#10;    @Test&#10;    @Order(3)&#10;    void update() {&#10;        Book saved = bookService.save(book1);&#10;        Book updated = new Book.Builder().copy(saved)&#10;                .setPrice(199.99)&#10;                .build();&#10;        Book result = bookService.update(updated);&#10;&#10;        assertNotNull(result);&#10;        assertEquals(199.99, result.getPrice());&#10;        System.out.println(&quot;Updated: &quot; + result);&#10;    }&#10;&#10;    @Test&#10;    @Order(4)&#10;    void deleteById() {&#10;        Book saved = bookService.save(book2);&#10;        bookService.deleteById(saved.getBookID());&#10;&#10;        Book deleted = bookService.findById(saved.getBookID());&#10;        assertNull(deleted);&#10;        System.out.println(&quot;Deleted book with ID: &quot; + saved.getBookID());&#10;    }&#10;&#10;    @Test&#10;    @Order(5)&#10;    void getAll() {&#10;        bookService.save(book1);&#10;        bookService.save(book2);&#10;&#10;        assertFalse(bookService.getAll().isEmpty());&#10;        System.out.println(&quot;All books: &quot; + bookService.getAll());&#10;    }&#10;&#10;    @Test&#10;    @Order(6)&#10;    void deleteAll() {&#10;        // Clean up dependent order items first to avoid foreign key constraint errors&#10;        orderItemRepository.deleteAll();&#10;        bookService.save(book1);&#10;        bookService.save(book2);&#10;        bookService.deleteAll();&#10;&#10;        assertTrue(bookService.getAll().isEmpty());&#10;        System.out.println(&quot;All books deleted&quot;);&#10;    }&#10;&#10;    @Test&#10;    @Order(7)&#10;    void findByIsbn() {&#10;        bookService.save(book1);&#10;        List&lt;Book&gt; found = bookService.findByIsbn(book1.getIsbn());&#10;        assertFalse(found.isEmpty());&#10;        assertTrue(found.stream().anyMatch(b -&gt; b.getIsbn().equals(book1.getIsbn())));&#10;        System.out.println(&quot;Found by ISBN: &quot; + found);&#10;    }&#10;&#10;    @Test&#10;    @Order(8)&#10;    void findByTitleContainingIgnoreCase() {&#10;        bookService.save(book1);&#10;        List&lt;Book&gt; found = bookService.findByTitleContainingIgnoreCase(&quot;alchemist&quot;);&#10;        assertFalse(found.isEmpty());&#10;        assertTrue(found.stream().anyMatch(b -&gt; b.getTitle().equalsIgnoreCase(book1.getTitle())));&#10;        System.out.println(&quot;Found by title (ignore case): &quot; + found);&#10;    }&#10;&#10;    @Test&#10;    @Order(9)&#10;    void findByAuthor() {&#10;        bookService.save(book2);&#10;        List&lt;Book&gt; found = bookService.findByAuthor(book2.getAuthor());&#10;        assertFalse(found.isEmpty());&#10;        assertTrue(found.stream().anyMatch(b -&gt; b.getAuthor().equals(book2.getAuthor())));&#10;        System.out.println(&quot;Found by author: &quot; + found);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>